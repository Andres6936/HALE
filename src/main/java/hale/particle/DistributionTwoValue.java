/*
 * Hale is highly moddable tactical RPG.
 * Copyright (C) 2011 Jared Stephen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package hale.particle;

import hale.loading.Saveable;

/**
 * A one-valued Distribution.  A distribution allows players to specify the possible
 * values that a given attribute of a {@link Particle} will possess.  The Distribution is
 * supplied to the {@link ParticleGenerator}, which then generates particles with attributes
 * based on the distributions supplied.  For example, you can specify a random distribution
 * for the velocity, position, or color of the particles generated by the Particle Generator.
 * <p>
 * This distribution supplies two values, useful for vector based quantities like velocity.
 *
 * @author Jared Stephen
 */

public interface DistributionTwoValue extends Saveable
{

    /**
     * Generates two values from this distribution for the given particle.  The values
     * may or may not depend on the state of the supplied particle.
     *
     * @param particle the Particle to generate a value for.
     * @return a float[] of size 4.  The first two values are the x and y values of the
     * generated vector.  The second two values are the magnitude and angle of the vector.
     */

    public float[] generate(Particle particle);

    /**
     * If this DistributionTwoValue has any internal state, returns a copy
     * of this.  If this DistributionTwoValue does not have any state, returns
     * this DistributionTwoValue.
     *
     * @return a copy of this Distribution or this Distribution
     */

    public DistributionTwoValue getCopyIfHasState();
}
